<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Tkk</title>
    <link>http://binlaniua.github.io/post/</link>
    <description>Recent content in Posts on Tkk</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 07 Sep 2019 12:04:27 +0800</lastBuildDate>
    
	<atom:link href="http://binlaniua.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>spring的cors为什么不起作用了?</title>
      <link>http://binlaniua.github.io/post/java/cors/</link>
      <pubDate>Sat, 07 Sep 2019 12:04:27 +0800</pubDate>
      
      <guid>http://binlaniua.github.io/post/java/cors/</guid>
      <description> 先看看正常的配置 public class WebConfig extends WebMvcConfigurationSupport { public void addCorsMappings(CorsRegistry registry) { registry .addMapping(&amp;quot;/**/*&amp;quot;) .allowedOrigins(&amp;quot;*&amp;quot;) .allowedMethods(&amp;quot;*&amp;quot;) .allowedHeaders(&amp;quot;*&amp;quot;) .allowCredentials(true) ; } }  问题 当我们的接口返回异常, spring会foraward到error的controller 或者当我们定义了 @ControllerAdvice 这个, 那么会forward到这个里面 这时上面定义的会失效, 毕竟forward了, 之前的response里面放的数据都会被新的controller重置  如何解决(采用Filter的方式, 每次都会写入跨域响应) public class WebConfig extends WebMvcConfigurationSupport { @Bean public CorsFilter corsFilter() { final UrlBasedCorsConfigurationSource source = new UrlBasedCorsConfigurationSource(); final CorsConfiguration config = new CorsConfiguration(); config.setAllowCredentials(true); config.setAllowedOrigins(Collections.singletonList(&amp;quot;*&amp;quot;)); config.setAllowedHeaders(Arrays.asList( &amp;quot;*&amp;quot; )); config.setAllowedMethods(Arrays.asList( &amp;quot;*&amp;quot; )); source.registerCorsConfiguration(&amp;quot;/**&amp;quot;, config); return new CorsFilter(source); } }  </description>
    </item>
    
    <item>
      <title>正确的使用 DelayQueue</title>
      <link>http://binlaniua.github.io/post/java/delayqueue/</link>
      <pubDate>Mon, 02 Sep 2019 10:23:05 +0800</pubDate>
      
      <guid>http://binlaniua.github.io/post/java/delayqueue/</guid>
      <description>使用场景  下单后多少分钟未支付关闭订单 发货了多少天后未确认收货, 自动收货 确认收货后, 多少天后没问题，自动完成 等等需要动态的在某一个时间点处理一件事情  为什么不能轮训  每分钟查询一次, 不精确 每秒查询一次, 资源浪费  最佳实践 创建一个实体用来持久化延迟任务 @Data @Builder @NoArgsConstructor @AllArgsConstructor @Entity public class DelayTask implements Serializable, Delayed { @Id private String id; private String beanName; //当触发的时候, 使用谁处理该任务 private Date fireTime; //触发时间 private String arguments; //参数, json格式 @Override public long getDelay(TimeUnit unit) { return unit.convert(this.fireTime.getTime() - System.currentTimeMillis(), TimeUnit.MILLISECONDS); } @Override public int compareTo(Delayed delayed) { DelayTask msg = (DelayTask) delayed; // 切记, 下面这行代码是有问题的 // 因为 getDelay是long类型, 2个时间如果间距很长, 相减会出现负数, 导致触发时间旧的排到了前面, 触发时间短的在后面 // 而DelayQueue内部是使用PriorityQueue优先级队列, 所以优先延迟等待触发时间旧的任务, 导致触发时间短的不触发 // return (int) (this.</description>
    </item>
    
    <item>
      <title>优雅的使用jackson去序列化枚举</title>
      <link>http://binlaniua.github.io/post/java/enum-serializer/</link>
      <pubDate>Sat, 10 Aug 2019 19:49:46 +0800</pubDate>
      
      <guid>http://binlaniua.github.io/post/java/enum-serializer/</guid>
      <description>原因 我们经常用枚举来标识各种状态和类型, 但是有时候又需要给这个枚举加一个中文名, 比如如下这个例子
public enum Sex { Man, Woman; } @Data @AllArgsConstructor public class Person { private String name; private Sex sex; }  实例一个对象并且用jackson去序列化
Person person = new Person(&amp;quot;tkk&amp;quot;, Sex.Man); 打印 ==&amp;gt; {&amp;quot;name&amp;quot;:&amp;quot;tkk&amp;quot;,&amp;quot;sex&amp;quot;:&amp;quot;Man&amp;quot;}  加强枚举 public enum Sex { Man(&amp;quot;男人&amp;quot;), Woman(&amp;quot;女人&amp;quot;); @Getter private String text; Sex(String text) { this.text = text; } }  再次运行实例, 发现还是打印如下, 那么如何能显示我们里面定义的text呢
Person person = new Person(&amp;quot;tkk&amp;quot;, Sex.Man); 打印 ==&amp;gt; {&amp;quot;name&amp;quot;:&amp;quot;tkk&amp;quot;,&amp;quot;sex&amp;quot;:&amp;quot;Man&amp;quot;}  自定义序列化 public class SexSerializer extends StdSerializer&amp;lt;Sex&amp;gt; { public SexSerializer() { super(Sex.</description>
    </item>
    
    <item>
      <title>react native 中 gif 只有第一帧</title>
      <link>http://binlaniua.github.io/post/react-native/photos/</link>
      <pubDate>Fri, 26 Jul 2019 18:21:48 +0800</pubDate>
      
      <guid>http://binlaniua.github.io/post/react-native/photos/</guid>
      <description>原因 在做图片上传的时候, 我们有可能需要上传 gif, 或者高清大图, 但是 rn 的 CameraRoll 返回只是 gif 的第一帧, 无法使用
方案 react-native-photos-framework
安装 npm install --save binlaniua/react-native-photos-framework  封装一个 ts import RNPhotosFramework from &amp;quot;react-native-photos-framework&amp;quot;; export interface IImagePage { page: string; imageList: Array&amp;lt;IImage&amp;gt;; } export interface IImage { width: number; //图片宽度 height: number; //图片高度 uri: string; //url?_高度_宽度 type: string; //类型 originUri: string; //原始图片 } const cameraApi = { /** * @param page 第几页 * @param size 一页几个 */ async photos(page: any, size: number): Promise&amp;lt;IImagePage&amp;gt; { const result = await RNPhotosFramework.</description>
    </item>
    
    <item>
      <title>docker ) mysql</title>
      <link>http://binlaniua.github.io/post/docker/mysql/</link>
      <pubDate>Fri, 26 Jul 2019 16:46:38 +0800</pubDate>
      
      <guid>http://binlaniua.github.io/post/docker/mysql/</guid>
      <description>expost=端口号 \ logPath=日志目录 \ dataPath=数据目录 \ rootPass=root密码 \ docker \ run \ -p $expose:3306 \ -v $logPath:/logs \ -v $dataPath:/var/lib/mysql \ -e MYSQL_ROOT_PASSWORD=$rootPass \ --name mysql \ -d mysql:5.7  </description>
    </item>
    
    <item>
      <title>docker ) shadowsocks</title>
      <link>http://binlaniua.github.io/post/docker/shadowsocks/</link>
      <pubDate>Fri, 26 Jul 2019 16:46:38 +0800</pubDate>
      
      <guid>http://binlaniua.github.io/post/docker/shadowsocks/</guid>
      <description>method=加密类型[aes-256-cfb] \ pass=密码 \ port=对外端口 \ docker \ run \ -dt \ -p $port:6443 \ -s &amp;quot;-s 0.0.0.0 -p 6443 -m $method -k $pass --fast-open&amp;quot; --name ss \ mritd/shadowsocks  </description>
    </item>
    
    <item>
      <title>error: Unable to resolve build file: XCBCore.BuildFile</title>
      <link>http://binlaniua.github.io/post/problem/1/</link>
      <pubDate>Fri, 26 Jul 2019 16:29:25 +0800</pubDate>
      
      <guid>http://binlaniua.github.io/post/problem/1/</guid>
      <description> 问题出现的原因 升级到 xcode10+以上编译之前的项目
两种方式 1  关闭 xcode 的所有项目 退出然后重启 xcode XCode &amp;gt; Product &amp;gt; Clean Build Folder  2  关闭 xcode 的所有项目 cd ~/Library/Developer/Xcode/DerivedData 清空该目录 退出 xcode 重新打开 XCode &amp;gt; Product &amp;gt; Clean Build Folder  </description>
    </item>
    
  </channel>
</rss>