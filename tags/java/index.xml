<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on Tkk</title>
    <link>http://binlaniua.github.io/tags/java/</link>
    <description>Recent content in java on Tkk</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 02 Sep 2019 10:23:05 +0800</lastBuildDate>
    
	<atom:link href="http://binlaniua.github.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>正确的使用 DelayQueue</title>
      <link>http://binlaniua.github.io/post/java/delayqueue/</link>
      <pubDate>Mon, 02 Sep 2019 10:23:05 +0800</pubDate>
      
      <guid>http://binlaniua.github.io/post/java/delayqueue/</guid>
      <description>使用场景  下单后多少分钟未支付关闭订单 发货了多少天后未确认收货, 自动收货 确认收货后, 多少天后没问题，自动完成 等等需要动态的在某一个时间点处理一件事情  为什么不能轮训  每分钟查询一次, 不精确 每秒查询一次, 资源浪费  最佳实践 创建一个实体用来持久化延迟任务 @Data @Builder @NoArgsConstructor @AllArgsConstructor @Entity public class DelayTask implements Serializable, Delayed { @Id private String id; private String beanName; //当触发的时候, 使用谁处理该任务 private Date fireTime; //触发时间 private String arguments; //参数, json格式 @Override public long getDelay(TimeUnit unit) { return unit.convert(this.fireTime.getTime() - System.currentTimeMillis(), TimeUnit.MILLISECONDS); } @Override public int compareTo(Delayed delayed) { DelayTask msg = (DelayTask) delayed; // 切记, 下面这行代码是有问题的 // 因为 getDelay是long类型, 2个时间如果间距很长, 相减会出现负数, 导致触发时间旧的排到了前面, 触发时间短的在后面 // 而DelayQueue内部是使用PriorityQueue优先级队列, 所以优先延迟等待触发时间旧的任务, 导致触发时间短的不触发 // return (int) (this.</description>
    </item>
    
    <item>
      <title>优雅的使用jackson去序列化枚举</title>
      <link>http://binlaniua.github.io/post/java/enum-serializer/</link>
      <pubDate>Sat, 10 Aug 2019 19:49:46 +0800</pubDate>
      
      <guid>http://binlaniua.github.io/post/java/enum-serializer/</guid>
      <description>原因 我们经常用枚举来标识各种状态和类型, 但是有时候又需要给这个枚举加一个中文名, 比如如下这个例子
public enum Sex { Man, Woman; } @Data @AllArgsConstructor public class Person { private String name; private Sex sex; }  实例一个对象并且用jackson去序列化
Person person = new Person(&amp;quot;tkk&amp;quot;, Sex.Man); 打印 ==&amp;gt; {&amp;quot;name&amp;quot;:&amp;quot;tkk&amp;quot;,&amp;quot;sex&amp;quot;:&amp;quot;Man&amp;quot;}  加强枚举 public enum Sex { Man(&amp;quot;男人&amp;quot;), Woman(&amp;quot;女人&amp;quot;); @Getter private String text; Sex(String text) { this.text = text; } }  再次运行实例, 发现还是打印如下, 那么如何能显示我们里面定义的text呢
Person person = new Person(&amp;quot;tkk&amp;quot;, Sex.Man); 打印 ==&amp;gt; {&amp;quot;name&amp;quot;:&amp;quot;tkk&amp;quot;,&amp;quot;sex&amp;quot;:&amp;quot;Man&amp;quot;}  自定义序列化 public class SexSerializer extends StdSerializer&amp;lt;Sex&amp;gt; { public SexSerializer() { super(Sex.</description>
    </item>
    
  </channel>
</rss>